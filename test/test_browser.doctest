>>> from mechanize._response import test_response
>>> from test_browser import TestBrowser2, make_mock_handler

Warn early about some mistakes setting a response object

>>> import StringIO
>>> br = TestBrowser2()
>>> br.set_response("blah")
Traceback (most recent call last):
...
ValueError: not a response object
>>> br.set_response(StringIO.StringIO())
Traceback (most recent call last):
...
ValueError: not a response object


.open() without an appropriate scheme handler should fail with
URLError

>>> br = TestBrowser2()
>>> br.open("http://example.com")
Traceback (most recent call last):
...
URLError: <urlopen error unknown url type: http>

Reload after failed .open() should fail due to failure to open, not
with BrowserStateError

>>> br.reload()
Traceback (most recent call last):
...
URLError: <urlopen error unknown url type: http>


.clear_history() should do what it says on the tin.  Note that the
history does not include the current response!

>>> br = TestBrowser2()
>>> br.add_handler(make_mock_handler(test_response)([("http_open", None)]))

>>> br.response() is None
True
>>> len(br._history._history)
0

>>> r = br.open("http://example.com/1")
>>> br.response() is not None
True
>>> len(br._history._history)
0

>>> br.clear_history()
>>> br.response() is not None
True
>>> len(br._history._history)
0

>>> r = br.open("http://example.com/2")
>>> br.response() is not None
True
>>> len(br._history._history)
1

>>> br.clear_history()
>>> br.response() is not None
True
>>> len(br._history._history)
0


.open()ing a Request with False .visit does not affect Browser state.
Redirections during such a non-visiting request should also be
non-visiting.

>>> from mechanize import BrowserStateError, Request, HTTPRedirectHandler
>>> from test_urllib2 import MockHTTPHandler

>>> req = Request("http://example.com")
>>> req.visit = False
>>> br = TestBrowser2()
>>> hh = MockHTTPHandler(301, "Location: http://example.com/\r\n\r\n")
>>> br.add_handler(hh)
>>> br.add_handler(HTTPRedirectHandler())
>>> def raises(exc_class, fn, *args, **kwds):
...     try:
...         fn(*args, **kwds)
...     except exc_class, exc:
...         return True
...     return False
>>> def test_state(br):
...     return (br.request is None and
...             br.response() is None and
...             raises(BrowserStateError, br.back)
...             )
>>> test_state(br)
True
>>> r = br.open(req)
>>> test_state(br)
True


.global_form() is separate from the other forms (partly for backwards-
compatibility reasons).

>>> from mechanize._response import test_response
>>> br = TestBrowser2()
>>> html = """\
... <html><body>
... <input type="text" name="a" />
... <form><input type="text" name="b" /></form>
... </body></html>
... """
>>> response = test_response(html, headers=[("Content-type", "text/html")])
>>> br.global_form()
Traceback (most recent call last):
BrowserStateError: not viewing any document
>>> br.set_response(response)
>>> br.global_form().find_control(nr=0).name
'a'
>>> len(list(br.forms()))
1
>>> iter(br.forms()).next().find_control(nr=0).name
'b'
