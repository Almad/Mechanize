The read_complete flag lets us know if all of the wrapped file's data
has been read.  We want to know this because Browser.back() must
.reload() the response if not.

I've noted here the various cases where .read_complete may be set.

>>> text = "To err is human, to moo, bovine.\n"*10
>>> def get_wrapper():
...     import cStringIO
...     from mechanize._response import seek_wrapper
...     f = cStringIO.StringIO(text)
...     wr = seek_wrapper(f)
...     return wr

.read() case #1

>>> wr = get_wrapper()
>>> wr.read_complete
False
>>> junk = wr.read()
>>> wr.read_complete
True
>>> wr.seek(0)
>>> wr.read_complete
True

Excercise partial .read() and .readline(), and .seek() case #1

>>> wr = get_wrapper()
>>> junk = wr.read(10)
>>> wr.read_complete
False
>>> junk = wr.readline()
>>> wr.read_complete
False
>>> wr.seek(0, 2)
>>> wr.read_complete
True
>>> wr.seek(0)
>>> wr.read_complete
True

.readlines() case #1

>>> wr = get_wrapper()
>>> junk = wr.readlines()
>>> wr.read_complete
True
>>> wr.seek(0)
>>> wr.read_complete
True

.seek() case #2

>>> wr = get_wrapper()
>>> wr.seek(10)
>>> wr.read_complete
False
>>> wr.seek(1000000)

.read() case #2

>>> wr = get_wrapper()
>>> junk = wr.read(1000000)
>>> wr.read_complete  # we read to the end, but don't know it yet
False
>>> junk = wr.read(10)
>>> wr.read_complete
True

.readline() case #1

>>> wr = get_wrapper()
>>> junk = wr.read(len(text)-10)
>>> wr.read_complete
False
>>> junk = wr.readline()
>>> wr.read_complete  # we read to the end, but don't know it yet
False
>>> junk = wr.readline()
>>> wr.read_complete
True

Test copying and sharing of .read_complete state

>>> import copy
>>> wr = get_wrapper()
>>> wr2 = copy.copy(wr)
>>> wr.read_complete
False
>>> wr2.read_complete
False
>>> junk = wr2.read()
>>> wr.read_complete
True
>>> wr2.read_complete
True


Fix from -r36082: .read() after .close() used to break
.read_complete state

>>> from mechanize._response import test_response
>>> r = test_response(text)
>>> junk = r.read(64)
>>> r.close()
>>> r.read_complete
False
>>> r.read()
''
>>> r.read_complete
False
